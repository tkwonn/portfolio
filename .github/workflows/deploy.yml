name: deploy to EC2

on:
  push:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Use Node.js 20 🛎
        uses: actions/setup-node@v4
        with:
          node-version: '20.13.1'
          cache: 'npm'

      # Only update the cache when dependencies are updated.
      - name: Cache node_modules 📦
        id: cache-nodemodules
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
            ${{ runner.os }}-

      - name: Install dependencies ‍💻
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: npm ci

      - name: Run ESLint 👀
        run: npm run lint

      - name: Run Prettier 👀
        run: npm run check-format

  deploy:
    needs: [build]
    runs-on: ubuntu-22.04

    permissions:
      id-token: write
      contents: read

    env:
      ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
      SESSION_NAME: portfolio-${{ github.run_id }}-${{ github.run_attempt }}
      EC2_INSTANCE_ID: "i-0787bc1994b8b31e1"
      AWS_REGION: "us-west-2"
      GITHUB_BRANCH: "${{ github.ref_name }}"

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy using AWS SSM 🔨
        run: |
          COMMANDS_JSON=$(cat << 'EOF'
          {
            "commands": [
              "set -e",
              "cd /home/ubuntu/web/portfolio",
              "git reset --hard",
              "git pull origin $GITHUB_BRANCH",
              "npm ci",
              "npm run build",
              "pm2 restart portfolio || pm2 start npm --name portfolio -- start",
              "pm2 save"
            ]
          }
          EOF
          )

          # Send SSM Command
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy application" \
            --parameters "$COMMANDS_JSON" \
            --region "${{ env.AWS_REGION }}" \
            --query "Command.CommandId" \
            --output text)

          # Wait for the command to complete
          aws ssm wait command-executed \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --command-id "$COMMAND_ID" \
            --region "${{ env.AWS_REGION }}" \
            --cli-read-timeout 900 \
            --cli-connect-timeout 900

          # Retrieve and display logs
          OUTPUT=$(aws ssm get-command-invocation \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --command-id "$COMMAND_ID" \
            --query "StandardOutputContent" \
            --output text)
            
          echo "SSM Output:"
          echo "$OUTPUT"

          # Retrieve error logs if any
          ERROR=$(aws ssm get-command-invocation \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --command-id "$COMMAND_ID" \
            --query "StandardErrorContent" \
            --output text)
            
          if [ "$ERROR" != "null" ]; then
            echo "SSM Errors:"
            echo "$ERROR"
            exit 1
          fi