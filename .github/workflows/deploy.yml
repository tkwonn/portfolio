name: deploy to EC2

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'public/**'
      - 'package.json'
      - 'package-lock.json'
      - 'next.config.js'
      - '.github/workflows/**'

jobs:
  ####### CI #######
  lint:
    runs-on: ubuntu-22.04

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Use Node.js 20.13.1 üõé
        uses: actions/setup-node@v4
        with:
          node-version: 20.13.1
          cache: 'npm'

      - name: Cache node modules üì¶
        id: cache-npm
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-

      - name: Install dependencies ‚è≥
        run: npm ci

      - name: Run ESLint Check üëÄ
        run: npm run lint

      - name: Run Prettier Check üëÄ
        run: npm run check-format

  ####### CD #######
  deploy:
    needs: lint
    runs-on: ubuntu-22.04

    permissions:
      id-token: write
      contents: read

    env:
      ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
      SESSION_NAME: deploy-${{ github.run_id }}-${{ github.run_attempt }}
      EC2_INSTANCE_ID: "i-0787bc1994b8b31e1"
      AWS_REGION: "us-west-2"
      GITHUB_BRANCH: "${{ github.ref_name }}"

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Application üöÄ
        run: |
          COMMANDS_JSON=$(cat <<EOF
          {
            "commands": [
              "set -e",
              "sudo chown -R ubuntu:ubuntu /home/ubuntu/web/portfolio",
              "sudo -u ubuntu bash -c \"cd /home/ubuntu/web/portfolio && \
                git fetch origin $GITHUB_BRANCH && \
                git reset --hard origin/$GITHUB_BRANCH && \
                npm ci && \
                npm run build && \
                sudo systemctl reload nginx\""
            ]
          }
          EOF
          )

          # Send SSM Command
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy application" \
            --parameters "$COMMANDS_JSON" \
            --region "${{ env.AWS_REGION }}" \
            --timeout-seconds 3600 \
            --query "Command.CommandId" \
            --output text)

          echo "SSM Command ID: $COMMAND_ID"

          # Wait for the command to finish
          aws ssm wait command-executed \
            --command-id "$COMMAND_ID" \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --region "${{ env.AWS_REGION }}" || {
              echo "SSM command failed or timed out."
              aws ssm get-command-invocation \
                --instance-id "${{ env.EC2_INSTANCE_ID }}" \
                --command-id "$COMMAND_ID" \
                --region "${{ env.AWS_REGION }}" \
                --query "StandardErrorContent" \
                --output text
              exit 1
            }

          # Get the command output
          OUTPUT=$(aws ssm get-command-invocation \
            --instance-id "${{ env.EC2_INSTANCE_ID }}" \
            --command-id "$COMMAND_ID" \
            --region "${{ env.AWS_REGION }}" \
            --query "StandardOutputContent" \
            --output text)

          echo "$OUTPUT"