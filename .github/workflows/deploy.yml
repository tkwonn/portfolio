name: deploy to EC2

on:
  push:
    branches: [main]

jobs:
  ####### Build(CI) #######
  build:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        node-version: [20.13.1]

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ matrix.node-version }} üõé
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Cache node modules üì¶
        id: cache-npm
        uses: actions/cache@v4
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      
      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: npm list

      - name: Install dependencies ‚è≥
        run: npm ci

      - name: Run ESLint Check üëÄ
        run: npm run lint

      - name: Run Prettier Check üëÄ
        run: npm run check-format

  ####### Deploy(CD) #######
  deploy:
    needs: build
    runs-on: ubuntu-22.04

    permissions:
      id-token: write
      contents: read

    env:
      ROLE_ARN: arn:aws:iam::${{ secrets.AWS_ID }}:role/${{ secrets.ROLE_NAME }}
      SESSION_NAME: deploy-${{ github.run_id }}-${{ github.run_attempt }}
      EC2_INSTANCE_ID: "i-0787bc1994b8b31e1"
      AWS_REGION: "us-west-2"
      S3_BUCKET: ${{ secrets.S3_BUCKET }}
      GITHUB_BRANCH: "${{ github.ref_name }}"

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          role-session-name: ${{ env.SESSION_NAME }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Deploy Application üöÄ
        run: |
          COMMANDS_JSON=$(cat << EOF
          {
            "commands": [
              "set -e",
              "sudo chown -R ubuntu:ubuntu /home/ubuntu/web/portfolio",
              "sudo -u ubuntu bash -c 'set -e; cd /home/ubuntu/web/portfolio && \
                git fetch origin $GITHUB_BRANCH && \
                git reset --hard origin/$GITHUB_BRANCH && \
                npm ci && \
                npm run build && \
                (pm2 restart portfolio || pm2 start npm --name portfolio -- start) && \
                pm2 save'"
            ]
          }
          EOF
          )

          # Send SSM Command
          COMMAND_ID=$(aws ssm send-command \
            --instance-ids "${{ env.EC2_INSTANCE_ID }}" \
            --document-name "AWS-RunShellScript" \
            --comment "Deploy application" \
            --parameters "$COMMANDS_JSON" \
            --region "${{ env.AWS_REGION }}" \
            --timeout-seconds 3600 \
            --query "Command.CommandId" \
            --output text)

          echo "SSM Command ID: $COMMAND_ID"

          # Poll for command status
          MAX_ATTEMPTS=60
          SLEEP_INTERVAL=10

          for (( i=0; i<$MAX_ATTEMPTS; i++ ))
          do
            STATUS=$(aws ssm list-command-invocations \
              --command-id "$COMMAND_ID" \
              --details \
              --query "CommandInvocations[0].Status" \
              --output text)

            echo "Current SSM command status: $STATUS"

            # Retrieve logs progressively
            OUTPUT=$(aws ssm get-command-invocation \
              --instance-id "${{ env.EC2_INSTANCE_ID }}" \
              --command-id "$COMMAND_ID" \
              --query "StandardOutputContent" \
              --output text || true)

            if [ -n "$OUTPUT" ]; then
              echo "$OUTPUT"
            fi

            if [ "$STATUS" == "Success" ]; then
              echo "SSM command succeeded!"
              break
            elif [ "$STATUS" == "Failed" ]; then
              echo "SSM command failed!"
              exit 1
            fi

            sleep $SLEEP_INTERVAL
          done

          if [ "$STATUS" != "Success" ]; then
            echo "SSM command did not complete within expected time."
            exit 1
          fi